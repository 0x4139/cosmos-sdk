* RFC 006: API Module

** Changelog
2023-04-04: Draft

** Background
This RFC proposes an SDK wide refactor of all Go types generated by protoc-gen-go from protobuf IDL into
~cosmossdk.io/api~.  The primary motivation for this is twofold, 1) solve the semver compatibility issues
described in [[https://github.com/cosmos/cosmos-sdk/pull/11802][ADR-054]], and 2) identify a strategy the long standing goal of
[[https://github.com/cosmos/cosmos-sdk/issues/11899][separating all SDK modules into independent go modules]].  More is said on (1) in
[[Principles of API development for forward and backward compatibility]], but the focus of this doc is (2) since
cyclic dependencies between modules are preventing further work.  These dependencies were enumerated in [[https://github.com/cosmos/cosmos-sdk/issues/13025][#13025]]
but there has been little progress since.

** Proposal

Move all gogo generated types out of the their SDK module and into to api/v1, and move all pulsar types to
api/v2alpha1.

*** Effect

At time of writing the following cyclic module dependencies are expressed in the SDK.

#+begin_example
/x/auth/ <-> /x/authz/
/x/auth/ <-> /x/group/
/x/auth/ <-> /x/genutil/
/x/auth/ <-> /x/staking/
/x/auth/ <-> /x/bank/
/x/auth/ <-> /x/gov/
/x/authz/ <-> /x/group/
/x/authz/ <-> /x/staking/
/x/authz/ <-> /x/bank/
/x/authz/ <-> /x/gov/
/x/bank/ <-> /x/group/
/x/distribution/ <-> /x/staking/
/x/distribution/ <-> /x/gov/
/x/gov/ <-> /x/group/
/x/gov/ <-> /x/params/
/x/gov/ <-> /x/staking/
/x/simulation/ <-> /x/staking/
#+end_example

The adoption of this proposal will result in the removal of the following cross module dependencies (36 files):

#+begin_example
/x/auth/helpers/genaccounts.go -> /x/bank/types/genesis.pb.go
/x/auth/migrations/v2/store.go -> /x/bank/types/query.pb.go
/x/auth/migrations/v2/store.go -> /x/staking/types/query.pb.go
/x/auth/migrations/v2/store.go -> /x/staking/types/staking.pb.go
/x/auth/tx/config/expected_keepers.go -> /x/bank/types/query.pb.go
/x/auth/tx/config/textual.go -> /x/bank/types/query.pb.go
/x/auth/tx/config/textual.go -> /x/bank/types/bank.pb.go
/x/authz/client/cli/query.go -> /x/bank/types/authz.pb.go
/x/authz/client/cli/tx.go -> /x/staking/types/authz.pb.go
/x/authz/client/cli/tx.go -> /x/bank/types/authz.pb.go
/x/authz/client/cli/tx.go -> /x/staking/types/query.pb.go
/x/authz/client/cli/tx.go -> /x/staking/types/staking.pb.go
/x/authz/simulation/genesis.go -> /x/gov/types/v1/tx.pb.go
/x/authz/simulation/operations.go -> /x/bank/types/tx.pb.go
/x/authz/simulation/operations.go -> /x/bank/types/authz.pb.go
/x/distribution/types/expected_keepers.go -> /x/staking/types/staking.pb.go
/x/genutil/collect.go -> /x/staking/types/tx.pb.go
/x/genutil/collect.go -> /x/staking/types/staking.pb.go
/x/genutil/gentx.go -> /x/staking/types/staking.pb.go
/x/genutil/gentx.go -> /x/staking/types/genesis.pb.go
/x/genutil/migrations/v043/migrate.go -> /x/gov/types/v1beta1/genesis.pb.go
/x/genutil/migrations/v043/migrate.go -> /x/bank/types/genesis.pb.go
/x/genutil/migrations/v046/migrate.go -> /x/gov/types/v1beta1/genesis.pb.go
/x/genutil/migrations/v046/migrate.go -> /x/staking/types/genesis.pb.go
/x/genutil/migrations/v047/migrate.go -> /x/gov/types/v1/genesis.pb.go
/x/genutil/migrations/v047/migrate.go -> /x/distribution/types/genesis.pb.go
/x/genutil/migrations/v047/migrate.go -> /x/auth/types/genesis.pb.go
/x/genutil/migrations/v047/migrate.go -> /x/bank/types/genesis.pb.go
/x/genutil/types/genesis_state.go -> /x/staking/types/tx.pb.go
/x/group/migrations/v2/gen_state.go -> /x/auth/types/genesis.pb.go
/x/group/simulation/genesis.go -> /x/bank/types/tx.pb.go
/x/simulation/params.go -> /x/staking/types/staking.pb.go
/x/simulation/params.go -> /x/staking/types/genesis.pb.go
/x/slashing/keeper/infractions.go -> /x/staking/types/staking.pb.go
/x/slashing/keeper/keeper.go -> /x/staking/types/staking.pb.go
/x/slashing/types/expected_keepers.go -> /x/staking/types/staking.pb.go
#+end_example

This resolves 2 cyclic dependencies, ~/x/gov <-> /x/group~ and ~/x/auth <-> /x/staking~ and progresses the
removal of further cyclic cross module dependencies.

** References
*** Principles of API development for forward and backward compatibility

Note this was originally shared in [[https://github.com/cosmos/cosmos-sdk/pull/11802#issuecomment-1460308399][ADR-054]].

This section identifies the principles of an API development and maintenance path for the CosmosSDK which is
already well understood in practice, reasonably sane, not too clever, and solves the [[https://github.com/cosmos/cosmos-sdk/blob/aaronc/adr-proto-go-module/docs/architecture/adr-054-semver-compatible-modules.md#problem-1-semantic-import-versioning-compatibility ][problems]]  put forward by
ADR-054.

**** Interface

1.  CosmosSDK APIs are specified by proto IDL.
2.  There is one API go module containing code generated from (1).
3.  Within this API module, SDK module APIs are separated by path.
4.  Semantic versioning of module APIs is maintained by path, e.g. `bank/v1/tx.go`, `bank/v2/tx.go`.
5.  API changes within a single module-version must be non buf-breaking (additive)
6.  Old versions of APIs are kept forever.
7.  *When an additive API change is state machine breaking for a module a new API version (folder) must be
    introduced.*
8.  Buf breaking changes are permitted between module API versions.

Points (1) through (5), and to some extent (6) (as in the case of x/gov), are already the SDK status quo.  The
only real departure is (7), with (8) as a refinement.  [[https://github.com/cosmos/cosmos-sdk/blob/aaronc/adr-proto-go-module/docs/architecture/adr-054-semver-compatible-modules.md#problem-3-handling-minor-version-incompatibilities][Problem 3: Handling Minor Version Incompatibilities]] is
solved by (7) by breaking the contract in a way which forces the developer to explicitly handle message
conversion.

Taken as a whole these points also address [[https://github.com/cosmos/cosmos-sdk/blob/aaronc/adr-proto-go-module/docs/architecture/adr-054-semver-compatible-modules.md#problem-2-circular-dependencies][Problem 2: Circular dependencies]] since the API is versioned
separately from sate machine modules.

**** Implementation

1.  Module API types are permitted in a module&rsquo;s message and query server API
2.  Following the [[https://en.wikipedia.org/wiki/Robustness_principle][Robustness Principle]], modules message servers should support all past versions of API
    messages; a module must know how to map past versions of messages to the latest.
3.  A module is made capable of supporting future versions of API messages (i.e. the SDK module is held back
    while the API advances) through the injection of an adapter with knowledge of mapping between past and
    future API messages.
4.  Therefore, for each module message server API at semantic version *n*, mapping code must be committed to
    translate to versions *n-1* and *n+1*.
5.  Module API types **must not be present** in a Keeper API, as presented at the consumer (i.e. expected_keeper.go)

Points (1) through (3) address [[https://github.com/cosmos/cosmos-sdk/blob/aaronc/adr-proto-go-module/docs/architecture/adr-054-semver-compatible-modules.md#problem-1-semantic-import-versioning-compatibility][Problem 1: Semantic Import Versioning Compatibility]], (2) for backward, and (3)
for forward compatibility *at the message server level*.

Point (4) can be implemented without a version-aware message router or inter-module message client, but will
require a fork on either the client or server module to migrate the message from version *n* to *n-1* to fully
support (3), forward compatibility.  Backward compatibility (2) can be handled at the server directly, and
therefore no fork is needed.  The introduction of a version aware routing layer or inter-module message client
can push this problem up to configuration, thereby removing the need for a fork.  I would not recommend either
of these solutions (router or message client) initially until we discover how common the problem of forward
compatibility is in practice.

Point (5) is nearly the status the quo of the SDK with a few (easily fixable) exceptions.  By maintaining a
consumer side Keeper API free from the types defined in (Interface/2) we allow for continued Keeper API level
compatibility between modules irrespective of SDK API version, provided we continue to implement non-breaking,
additive changes to Keeper APIs.

**** Summary

To summarize, it seems possible to achieve the goals of ADR-54, namely SDK modules as semantically versioned
independent go modules, with some strategic refactoring and without an SDK wide rewrite.  Solutions (A) and
(B) proposed in ADR-54 also achieve this goal too but with increased scope and features.  This proposal seems
to the author the minimum distillation of work required for the goals of a sensible dependency graph and
independent go modules in the SDK.
