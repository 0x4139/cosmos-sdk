// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: testpb/bank_query.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankQueryServiceClient is the client API for BankQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankQueryServiceClient interface {
	// Balance queries the Balance table by its primary key.
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// Balances queries the Balance table using the primary key index.
	Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error)
	// BalancesByDenom queries the Balance table using the primary key index.
	BalancesByDenom(ctx context.Context, in *BalancesByDenomRequest, opts ...grpc.CallOption) (*BalancesByDenomResponse, error)
	// Supply queries the Supply table by its primary key.
	Supply(ctx context.Context, in *SupplyRequest, opts ...grpc.CallOption) (*SupplyResponse, error)
	// Supplies queries the Supply table using the primary key index.
	Supplies(ctx context.Context, in *SuppliesRequest, opts ...grpc.CallOption) (*SuppliesResponse, error)
}

type bankQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankQueryServiceClient(cc grpc.ClientConnInterface) BankQueryServiceClient {
	return &bankQueryServiceClient{cc}
}

func (c *bankQueryServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/testpb.BankQueryService/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankQueryServiceClient) Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error) {
	out := new(BalancesResponse)
	err := c.cc.Invoke(ctx, "/testpb.BankQueryService/Balances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankQueryServiceClient) BalancesByDenom(ctx context.Context, in *BalancesByDenomRequest, opts ...grpc.CallOption) (*BalancesByDenomResponse, error) {
	out := new(BalancesByDenomResponse)
	err := c.cc.Invoke(ctx, "/testpb.BankQueryService/BalancesByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankQueryServiceClient) Supply(ctx context.Context, in *SupplyRequest, opts ...grpc.CallOption) (*SupplyResponse, error) {
	out := new(SupplyResponse)
	err := c.cc.Invoke(ctx, "/testpb.BankQueryService/Supply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankQueryServiceClient) Supplies(ctx context.Context, in *SuppliesRequest, opts ...grpc.CallOption) (*SuppliesResponse, error) {
	out := new(SuppliesResponse)
	err := c.cc.Invoke(ctx, "/testpb.BankQueryService/Supplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankQueryServiceServer is the server API for BankQueryService service.
// All implementations must embed UnimplementedBankQueryServiceServer
// for forward compatibility
type BankQueryServiceServer interface {
	// Balance queries the Balance table by its primary key.
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	// Balances queries the Balance table using the primary key index.
	Balances(context.Context, *BalancesRequest) (*BalancesResponse, error)
	// BalancesByDenom queries the Balance table using the primary key index.
	BalancesByDenom(context.Context, *BalancesByDenomRequest) (*BalancesByDenomResponse, error)
	// Supply queries the Supply table by its primary key.
	Supply(context.Context, *SupplyRequest) (*SupplyResponse, error)
	// Supplies queries the Supply table using the primary key index.
	Supplies(context.Context, *SuppliesRequest) (*SuppliesResponse, error)
	mustEmbedUnimplementedBankQueryServiceServer()
}

// UnimplementedBankQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankQueryServiceServer struct {
}

func (UnimplementedBankQueryServiceServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedBankQueryServiceServer) Balances(context.Context, *BalancesRequest) (*BalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (UnimplementedBankQueryServiceServer) BalancesByDenom(context.Context, *BalancesByDenomRequest) (*BalancesByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalancesByDenom not implemented")
}
func (UnimplementedBankQueryServiceServer) Supply(context.Context, *SupplyRequest) (*SupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supply not implemented")
}
func (UnimplementedBankQueryServiceServer) Supplies(context.Context, *SuppliesRequest) (*SuppliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Supplies not implemented")
}
func (UnimplementedBankQueryServiceServer) mustEmbedUnimplementedBankQueryServiceServer() {}

// UnsafeBankQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankQueryServiceServer will
// result in compilation errors.
type UnsafeBankQueryServiceServer interface {
	mustEmbedUnimplementedBankQueryServiceServer()
}

func RegisterBankQueryServiceServer(s grpc.ServiceRegistrar, srv BankQueryServiceServer) {
	s.RegisterService(&BankQueryService_ServiceDesc, srv)
}

func _BankQueryService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankQueryServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.BankQueryService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankQueryServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankQueryService_Balances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankQueryServiceServer).Balances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.BankQueryService/Balances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankQueryServiceServer).Balances(ctx, req.(*BalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankQueryService_BalancesByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankQueryServiceServer).BalancesByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.BankQueryService/BalancesByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankQueryServiceServer).BalancesByDenom(ctx, req.(*BalancesByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankQueryService_Supply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankQueryServiceServer).Supply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.BankQueryService/Supply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankQueryServiceServer).Supply(ctx, req.(*SupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankQueryService_Supplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankQueryServiceServer).Supplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.BankQueryService/Supplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankQueryServiceServer).Supplies(ctx, req.(*SuppliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankQueryService_ServiceDesc is the grpc.ServiceDesc for BankQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.BankQueryService",
	HandlerType: (*BankQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _BankQueryService_Balance_Handler,
		},
		{
			MethodName: "Balances",
			Handler:    _BankQueryService_Balances_Handler,
		},
		{
			MethodName: "BalancesByDenom",
			Handler:    _BankQueryService_BalancesByDenom_Handler,
		},
		{
			MethodName: "Supply",
			Handler:    _BankQueryService_Supply_Handler,
		},
		{
			MethodName: "Supplies",
			Handler:    _BankQueryService_Supplies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testpb/bank_query.proto",
}
