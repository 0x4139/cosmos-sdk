{
  "swagger": "2.0",
  "info": {
    "title": "testpb/test_schema_query.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "TestSchemaQueryService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/testpb/example_auto_inc_field_names": {
      "get": {
        "summary": "ExampleAutoIncFieldNames queries the ExampleAutoIncFieldName table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleAutoIncFieldNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncFieldNamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_auto_inc_field_names/{foo}": {
      "get": {
        "summary": "ExampleAutoIncFieldName queries the ExampleAutoIncFieldName table by its primary key.",
        "operationId": "TestSchemaQueryService_ExampleAutoIncFieldName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncFieldNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "foo",
            "description": "foo specifies the value of the foo field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_auto_increment_tables": {
      "get": {
        "summary": "ExampleAutoIncrementTables queries the ExampleAutoIncrementTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleAutoIncrementTables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncrementTablesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_auto_increment_tables.x": {
      "get": {
        "summary": "ExampleAutoIncrementTablesByX queries the ExampleAutoIncrementTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleAutoIncrementTablesByX",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncrementTablesByXResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x",
            "description": "x is the value of the x field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_auto_increment_tables.x/{x}": {
      "get": {
        "summary": "ExampleAutoIncrementTableByX queries the ExampleAutoIncrementTable table by its X index",
        "operationId": "TestSchemaQueryService_ExampleAutoIncrementTableByX",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncrementTableByXResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_auto_increment_tables/{id}": {
      "get": {
        "summary": "ExampleAutoIncrementTable queries the ExampleAutoIncrementTable table by its primary key.",
        "operationId": "TestSchemaQueryService_ExampleAutoIncrementTable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleAutoIncrementTableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id specifies the value of the id field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables": {
      "get": {
        "summary": "ExampleTables queries the ExampleTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTablesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "u32",
            "description": "u32 is the value of the u32 field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "i64",
            "description": "i64 is the value of the i64 field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables.bz-str": {
      "get": {
        "summary": "ExampleTablesByBzStr queries the ExampleTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTablesByBzStr",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTablesByBzStrResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "bz",
            "description": "bz is the value of the bz field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "str",
            "description": "str is the value of the str field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables.str-u32": {
      "get": {
        "summary": "ExampleTablesByStrU32 queries the ExampleTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTablesByStrU32",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTablesByStrU32Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "str",
            "description": "str is the value of the str field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "u32",
            "description": "u32 is the value of the u32 field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables.u64-str": {
      "get": {
        "summary": "ExampleTablesByU64Str queries the ExampleTable table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTablesByU64Str",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTablesByU64StrResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "u64",
            "description": "u64 is the value of the u64 field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "str",
            "description": "str is the value of the str field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables.u64-str/{u64}/{str}": {
      "get": {
        "summary": "ExampleTableByU64Str queries the ExampleTable table by its U64Str index",
        "operationId": "TestSchemaQueryService_ExampleTableByU64Str",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTableByU64StrResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "u64",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "str",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_tables/{u32}/{i64}/{str}": {
      "get": {
        "summary": "ExampleTable queries the ExampleTable table by its primary key.",
        "operationId": "TestSchemaQueryService_ExampleTable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTableResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "u32",
            "description": "u32 specifies the value of the u32 field in the primary key.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "i64",
            "description": "i64 specifies the value of the i64 field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "str",
            "description": "str specifies the value of the str field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_timestamps": {
      "get": {
        "summary": "ExampleTimestamps queries the ExampleTimestamp table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTimestamps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTimestampsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_timestamps.ts": {
      "get": {
        "summary": "ExampleTimestampsByTs queries the ExampleTimestamp table using the primary key index.",
        "operationId": "TestSchemaQueryService_ExampleTimestampsByTs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTimestampsByTsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "ts is the value of the ts field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/example_timestamps/{id}": {
      "get": {
        "summary": "ExampleTimestamp queries the ExampleTimestamp table by its primary key.",
        "operationId": "TestSchemaQueryService_ExampleTimestamp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbExampleTimestampResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id specifies the value of the id field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/simple_examples": {
      "get": {
        "summary": "SimpleExamples queries the SimpleExample table using the primary key index.",
        "operationId": "TestSchemaQueryService_SimpleExamples",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbSimpleExamplesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/simple_examples.unique": {
      "get": {
        "summary": "SimpleExamplesByUnique queries the SimpleExample table using the primary key index.",
        "operationId": "TestSchemaQueryService_SimpleExamplesByUnique",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbSimpleExamplesByUniqueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "unique",
            "description": "unique is the value of the unique field in the index.\nIt can be omitted to query for all valid values of that field in this segment of the index.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.countTotal",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/simple_examples.unique/{unique}": {
      "get": {
        "summary": "SimpleExampleByUnique queries the SimpleExample table by its Unique index",
        "operationId": "TestSchemaQueryService_SimpleExampleByUnique",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbSimpleExampleByUniqueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "unique",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    },
    "/testpb/simple_examples/{name}": {
      "get": {
        "summary": "SimpleExample queries the SimpleExample table by its primary key.",
        "operationId": "TestSchemaQueryService_SimpleExample",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testpbSimpleExampleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name specifies the value of the name field in the primary key.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TestSchemaQueryService"
        ]
      }
    }
  },
  "definitions": {
    "ExampleTableExampleMessage": {
      "type": "object",
      "properties": {
        "foo": {
          "type": "string"
        },
        "bar": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "testpbEnum": {
      "type": "string",
      "enum": [
        "ENUM_UNSPECIFIED",
        "ENUM_ONE",
        "ENUM_TWO",
        "ENUM_FIVE",
        "ENUM_NEG_THREE"
      ],
      "default": "ENUM_UNSPECIFIED"
    },
    "testpbExampleAutoIncFieldName": {
      "type": "object",
      "properties": {
        "foo": {
          "type": "string",
          "format": "uint64"
        },
        "bar": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "ExampleAutoIncFieldName is a table for testing InsertReturning\u003cFieldName\u003e."
    },
    "testpbExampleAutoIncFieldNameResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleAutoIncFieldName",
          "description": "value is the response value."
        }
      },
      "description": "ExampleAutoIncFieldNameResponse is the TestSchemaQuery/ExampleAutoIncFieldNameResponse response type."
    },
    "testpbExampleAutoIncFieldNamesResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleAutoIncFieldName"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleAutoIncFieldNamesResponse is the TestSchemaQuery/ExampleAutoIncFieldNamesResponse response type."
    },
    "testpbExampleAutoIncrementTable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "x": {
          "type": "string"
        },
        "y": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "testpbExampleAutoIncrementTableByXResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleAutoIncrementTable"
        }
      },
      "description": "ExampleAutoIncrementTableByXResponse is the TestSchemaQuery/ExampleAutoIncrementTableByXResponse response type."
    },
    "testpbExampleAutoIncrementTableResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleAutoIncrementTable",
          "description": "value is the response value."
        }
      },
      "description": "ExampleAutoIncrementTableResponse is the TestSchemaQuery/ExampleAutoIncrementTableResponse response type."
    },
    "testpbExampleAutoIncrementTablesByXResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleAutoIncrementTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleAutoIncrementTablesByXResponse is the TestSchemaQuery/ExampleAutoIncrementTablesByXResponse response type."
    },
    "testpbExampleAutoIncrementTablesResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleAutoIncrementTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleAutoIncrementTablesResponse is the TestSchemaQuery/ExampleAutoIncrementTablesResponse response type."
    },
    "testpbExampleSingleton": {
      "type": "object",
      "properties": {
        "foo": {
          "type": "string"
        },
        "bar": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "testpbExampleSingletonResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleSingleton"
        }
      },
      "description": "ExampleSingletonResponse is the TestSchemaQuery/ExampleSingletonResponse request type."
    },
    "testpbExampleTable": {
      "type": "object",
      "properties": {
        "u32": {
          "type": "integer",
          "format": "int64",
          "title": "Valid key fields:"
        },
        "u64": {
          "type": "string",
          "format": "uint64"
        },
        "str": {
          "type": "string"
        },
        "bz": {
          "type": "string",
          "format": "byte"
        },
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "dur": {
          "type": "string"
        },
        "i32": {
          "type": "integer",
          "format": "int32"
        },
        "s32": {
          "type": "integer",
          "format": "int32"
        },
        "sf32": {
          "type": "integer",
          "format": "int32"
        },
        "i64": {
          "type": "string",
          "format": "int64"
        },
        "s64": {
          "type": "string",
          "format": "int64"
        },
        "sf64": {
          "type": "string",
          "format": "int64"
        },
        "f32": {
          "type": "integer",
          "format": "int64"
        },
        "f64": {
          "type": "string",
          "format": "uint64"
        },
        "b": {
          "type": "boolean"
        },
        "e": {
          "$ref": "#/definitions/testpbEnum"
        },
        "repeated": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "title": "Invalid key fields:"
        },
        "map": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "msg": {
          "$ref": "#/definitions/ExampleTableExampleMessage"
        },
        "oneof": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "testpbExampleTableByU64StrResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleTable"
        }
      },
      "description": "ExampleTableByU64StrResponse is the TestSchemaQuery/ExampleTableByU64StrResponse response type."
    },
    "testpbExampleTableResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleTable",
          "description": "value is the response value."
        }
      },
      "description": "ExampleTableResponse is the TestSchemaQuery/ExampleTableResponse response type."
    },
    "testpbExampleTablesByBzStrResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTablesByBzStrResponse is the TestSchemaQuery/ExampleTablesByBzStrResponse response type."
    },
    "testpbExampleTablesByStrU32Response": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTablesByStrU32Response is the TestSchemaQuery/ExampleTablesByStrU32Response response type."
    },
    "testpbExampleTablesByU64StrResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTablesByU64StrResponse is the TestSchemaQuery/ExampleTablesByU64StrResponse response type."
    },
    "testpbExampleTablesResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTable"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTablesResponse is the TestSchemaQuery/ExampleTablesResponse response type."
    },
    "testpbExampleTimestamp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "ts": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "testpbExampleTimestampResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbExampleTimestamp",
          "description": "value is the response value."
        }
      },
      "description": "ExampleTimestampResponse is the TestSchemaQuery/ExampleTimestampResponse response type."
    },
    "testpbExampleTimestampsByTsResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTimestamp"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTimestampsByTsResponse is the TestSchemaQuery/ExampleTimestampsByTsResponse response type."
    },
    "testpbExampleTimestampsResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbExampleTimestamp"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "ExampleTimestampsResponse is the TestSchemaQuery/ExampleTimestampsResponse response type."
    },
    "testpbSimpleExample": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "unique": {
          "type": "string"
        },
        "notUnique": {
          "type": "string"
        }
      }
    },
    "testpbSimpleExampleByUniqueResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbSimpleExample"
        }
      },
      "description": "SimpleExampleByUniqueResponse is the TestSchemaQuery/SimpleExampleByUniqueResponse response type."
    },
    "testpbSimpleExampleResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/testpbSimpleExample",
          "description": "value is the response value."
        }
      },
      "description": "SimpleExampleResponse is the TestSchemaQuery/SimpleExampleResponse response type."
    },
    "testpbSimpleExamplesByUniqueResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbSimpleExample"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "SimpleExamplesByUniqueResponse is the TestSchemaQuery/SimpleExamplesByUniqueResponse response type."
    },
    "testpbSimpleExamplesResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testpbSimpleExample"
          },
          "description": "values are the results of the query."
        },
        "pagination": {
          "$ref": "#/definitions/v1beta1PageResponse",
          "description": "pagination is the pagination response."
        }
      },
      "description": "SimpleExamplesResponse is the TestSchemaQuery/SimpleExamplesResponse response type."
    },
    "v1beta1PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "countTotal": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "v1beta1PageResponse": {
      "type": "object",
      "properties": {
        "nextKey": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    }
  }
}
